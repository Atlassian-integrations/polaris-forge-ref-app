modules:
  'polaris:objectProvider':
    - key: slack-object-provider
      function: slack-resolver
      domains: ["slack.com"]
      subdomain: true
      linkPattern: >-
        ^https:\/\/.+?\.slack\.com\/archives\/[C|G][A-Z0-9][^/]+\/p[\d]+$
      authType: "oauth2"
    - key: atlassian-object-provider
      function: atlassian-resolver
      domains: ["atlassian.net", "jira-dev.com"]
      subdomain: true
      linkPattern: >-
        ^https:\/\/(?<cloudName>.+)\.(atlassian\.net|jira-dev\.com)\/browse\/(?<issueKey>.+-\d+)#?$
      authType: "api_key"
      authHint: "Please provide API token from <a href=\"${ATLASSIAN_ID_BASE_URL}/manage-profile/security/api-tokens\" target=\"_blank\">${ATLASSIAN_ID_BASE_URL}/manage-profile/security/api-tokens</a> in format \"<email>:<api_token>\""
  externalAuth:
    - key: slack
      scopes: []
      displayName: Slack
      providerType: oauth2
      authorizationUrl: 'https://slack.com/oauth/v2/authorize'
      exchangeUrl: 'https://slack.com/api/oauth.v2.access'
      revokeTokenUrl: 'https://slack.com/api/auth.revoke'
      additionalParameters:
        user_scope: >-
          reactions:read,mpim:read,im:read,channels:read,users:read
      credentialsRetriever:
        resolvers:
          accessToken: 'authed_user.access_token'
      profileRetriever:
        type: url
        value: 'https://slack.com/api/auth.test'
        resolvers:
          id: user_id
          displayName: user
        authorization:
          location: queryString
          parameterName: token
  function:
    - key: slack-resolver
      handler: index.runSlack
      externalAuth: slack
    - key: atlassian-resolver
      handler: index.runAtlassian
permissions:
  scopes: 
    - storage:app
app:
  id: ari:cloud:ecosystem::app/${FORGE_APP_ID}
  name: Polaris Forge ref app